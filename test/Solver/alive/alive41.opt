
; RUN: %souper-check %s | %FileCheck %s
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM
; CHECK: LGTM

; Name: InstCombineShift: 646-2
; Pre: C1 > C2
; %Op0 = ashr exact %X, C1
; %r = shl i33 %Op0, C2
;   =>
; %r = ashr exact %X, C1-C2

%X:i32 = var
%Op0 = ashrexact %X, 14
%r = shl %Op0, 12
infer %r
%r2 = ashrexact %X, 2
result %r2

; Name: InstCombineShift: 661
; Pre: C1 > C2
; %Op0 = shl nuw %X, C1
; %r = lshr i33 %Op0, C2
;   =>
; %r = shl nuw %X, C1-C2

%X:i80 = var
%Op0 = shlnuw %X, 67
%r = lshr %Op0, 13
infer %r
%r2 = shlnuw %X, 54
result %r2

; Name: InstCombineShift: 670
; Pre: C1 > C2
; %Op0 = shl %X, C1
; %r = lshr i33 %Op0, C2
;   =>
; %s = shl %X, C1-C2
; %r = and %s, -1 u>> C2

%X:i64 = var
%Op0 = shl %X, 55
%r = lshr %Op0, 40
infer %r
%s = shl %X, 15
%r2 = and %s, 16777215
result %r2

; Name: InstCombineShift: 676
; Pre: C1 > C2
; %Op0 = shl nsw %X, C1
; %r = ashr i33 %Op0, C2
;   =>
; %r = shl nsw %X, C1-C2

%X:i16 = var
%Op0 = shlnsw %X, 9
%r = ashr %Op0, 5
infer %r
%r2 = shlnsw %X, 4
result %r2

; Name: InstCombineShift: 708
; Pre: MaskedValueIsZero(%Op0, -1<<(width(C)-C))
; %r = shl %Op0, C
;   =>
; %r = shl nuw %Op0, C

%Op0:i32 = var
%mask = and %Op0, -16384
pc %mask 0
%r = shl %Op0, 14
infer %r
%r2 = shlnuw %Op0, 14
result %r2

; Name: InstCombineShift: 717
; Pre: ComputeNumSignBits(%Op0) > C
; %r = shl %Op0, C
;   =>
; %r = shl nsw %Op0, C

%Op0:i32 = var (signBits=19)
%r = shl %Op0, 17
infer %r
%r2 = shlnsw %Op0, 17
result %r2

; Name: InstCombineShift: 724
; %Op0 = shl i31 C1, %A
; %r = shl %Op0, C2
;   =>
; %r = shl C1<<C2, %A

%A:i32 = var
%Op0 = shl -475912488, %A
%r = shl %Op0, 14
infer %r
%r2 = shl -1984561152, %A
result %r2

; Name: InstCombineShift: 767
; Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
; %r = lshr %Op0, C
;   =>
; %r = lshr exact %Op0, C

%Op0:i32 = var
%mask = and %Op0, 3
pc %mask 0
%r = lshr %Op0, 2
infer %r
%r2 = lshrexact %Op0, 2
result %r2

; Name: InstCombineShift: 807
; Pre: C == width(%X)-width(%x)
; %X = zext %x
; %Op0 = shl %X, C
; %r = ashr i33 %Op0, C
;   =>
; %r = sext %x

%x:i32 = var
%X:i64 = zext %x
%Op0 = shl %X, 32
%r = ashr %Op0, 32
infer %r
%r2:i64 = sext %x
result %r2

; Name: InstCombineShift: 812
; Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
; %r = ashr %Op0, C
;   =>
; %r = ashr exact %Op0, C

%Op0:i32 = var
%mask = and %Op0, 255
pc %mask 0
%r = ashr %Op0, 8
infer %r
%r2 = ashrexact %Op0, 8
result %r2
