; REQUIRES: synthesis
; RUN: %souper-check -infer-rhs -souper-enumerative-synthesis-max-instructions=1 %s > %t1
; RUN: %FileCheck %s < %t1

; %20 is (ctpop %0), but due to the MaxCands bound in enumerative synthesis,
; %0 is not conllected as a synthesis component. This test case is to show
; even ctpop synthesis is failed, Souper can still synthesis good
; optimizations from collected components.

%0:i32 = var
%1:i32 = and 1431655765:i32, %0
%2:i32 = lshr %0, 1:i32
%3:i32 = and 1431655765:i32, %2
%4:i32 = add %1, %3
%5:i32 = and 858993459:i32, %4
%6:i32 = lshr %4, 2:i32
%7:i32 = and 858993459:i32, %6
%8:i32 = add %5, %7
%9:i32 = and 252645135:i32, %8
%10:i32 = lshr %8, 4:i32
%11:i32 = and 252645135:i32, %10
%12:i32 = add %9, %11
%13:i32 = and 16711935:i32, %12
%14:i32 = lshr %12, 8:i32
%15:i32 = and 16711935:i32, %14
%16:i32 = add %13, %15
%17:i32 = and 65535:i32, %16
%18:i32 = lshr %16, 16:i32
%19:i32 = and 65535:i32, %18
%20:i32 = add %17, %19
%21:i32 = add %20, 3:i32
%22:i32 = add %21, 8:i32
infer %22
; CHECK: %23:i32 = {{add 11:i32, %20|add %20, 11:i32}}
; CHECK: result %23