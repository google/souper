#!/usr/bin/env perl

# Copyright 2014 The Souper Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use warnings;
use strict;
use File::Temp;

sub compiling() {
    foreach my $arg (@ARGV) {
        return 1
            if ($arg =~ /\.c$|\.cpp$|\.CC$|\.c\+\+$|\.cc$|\.cxx$|\.C$|\.c\+$/);
    }
    return 0;
}

sub linkp() {
    foreach my $arg (@ARGV) {
        return 0 if ($arg eq "-S" || $arg eq "-c" || $arg eq "-shared");
    }
    return 1;
}

if ($0 =~ /clang$/) {
    unshift @ARGV, "@LLVM_BINDIR@/clang";
} elsif ($0 =~ /clang\+\+$/) {
    unshift @ARGV, "@LLVM_BINDIR@/clang++";
} else {
    die "Didn't expect sclang to be invoked as '$0'";
}

my $bitcodedir = $ENV{"SOUPER_SAVE_BITCODE"};
if (defined $bitcodedir && -d $bitcodedir && fork() == 0) {
    for (my $i=0; $i<scalar(@ARGV); $i++) {
	splice @ARGV, $i, 2 if ($ARGV[$i] eq "-o");
    }
    my $tmp = File::Temp->new(UNLINK => 1, DIR => $bitcodedir)->filename;
    push @ARGV, "-c", "-emit-llvm";
    push @ARGV, "-o", "${tmp}.bc";
    my $ofn = "${tmp}.cmd";
    open OUTF, ">$ofn" or die;
    foreach my $a (@ARGV) {
	print OUTF "$a ";
    }
    print OUTF "\n";
    close OUTF;
    exec @ARGV;
    die "bailing, exec failed";
}

my $solver = $ENV{"SOUPER_SOLVER"};
die "$0 requires the SOUPER_SOLVER environment variable to be defined, e.g. as -stp-path=/path/to/stp" unless $solver;

my $souper = 1;
# this environment variable is a comma-separated list of source files that
# souper should avoid processing, for example because they trigger known bugs
if ($ENV{"SOUPER_SKIP_FILES"}) {
    my %skips;
    foreach my $f (split(',', $ENV{"SOUPER_SKIP_FILES"})) {
        $skips{$f} = 1;
    }
    foreach my $a (@ARGV) {
        $souper = 0 if ($skips{$a});
    }
}

$souper = 0 if $ENV{"SOUPER_NO_SOUPER"};
$souper = 0 unless compiling();

if ($souper) {
    push @ARGV, (
        "-Xclang", "-load",
        "-Xclang", "@SOUPER_PASS@",
        "-mllvm", $solver,
        "-mllvm", "-solver-timeout=15",
    );

    if ($ENV{"SOUPER_DEBUG"}) {
        push @ARGV, ("-mllvm", "-souper-debug");
    }

    if (!$ENV{"SOUPER_NO_EXTERNAL_CACHE"}) {
        push @ARGV, ("-mllvm", "-souper-external-cache");
    }

    if ($ENV{"SOUPER_NO_INFER"}) {
        push @ARGV, ("-mllvm", "-souper-no-infer");
    }

    if ($ENV{"SOUPER_NO_INFER_I1"}) {
        push @ARGV, ("-mllvm", "-souper-infer-i1=false");
    }

    if ($ENV{"SOUPER_INFER_NOP"}) {
        push @ARGV, ("-mllvm", "-souper-infer-nop");
    }

    if ($ENV{"SOUPER_INFER_UNARY"}) {
        push @ARGV, ("-mllvm", "-souper-infer-unary");
    }

    if ($ENV{"SOUPER_STATIC_PROFILE"}) {
        push @ARGV, ("-mllvm", "-souper-static-profile");
    }

    if ($ENV{"SOUPER_DYNAMIC_PROFILE"}) {
        push @ARGV, ("-g", "-mllvm", "-souper-dynamic-profile");
    }

    if ($ENV{"SOUPER_INFER_INT"}) {
      push @ARGV, ("-mllvm", "-souper-infer-iN");
    }

    if ($ENV{"SOUPER_IGNORE_SOLVER_ERRORS"}) {
        push @ARGV, ("-mllvm", "-souper-ignore-solver-errors");
    }

    if ($ENV{"SOUPER_STATS"}) {
        push @ARGV, ("-mllvm", "-stats");
    }
}

if ($ENV{"SOUPER_DYNAMIC_PROFILE"} && linkp()) {
    push @ARGV, ("@PROFILE_LIBRARY@", "@HIREDIS_LIBRARY@");
}

exec @ARGV;
