#!/usr/bin/env perl

# Copyright 2014 The Souper Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use warnings;
use strict;
use Redis;
use Getopt::Long;
use File::Temp;
use Time::HiRes;

my $llvmas = "@LLVM_BINDIR@/llvm-as";
my $llvmopt = "@LLVM_BINDIR@/opt";
my $llvmdis = "@LLVM_BINDIR@/llvm-dis";
my $check = "@CMAKE_BINARY_DIR@/souper-check";
my $reducer = "@CMAKE_BINARY_DIR@/reduce";
my $triager = "@CMAKE_BINARY_DIR@/souper2llvm";

sub runit ($) {
    my $cmd = shift;
    my $res = (system "$cmd");
    return $? >> 8;
}

sub usage() {
    print <<'END';
Options:
  -merge       Merge optimizations that differ only in bitwidths and constants
  -noopts      Dump not-optimizations instead of optimizations
  -parse       Ensure that each LHS in the cache parses as Souper
  -sort=size|sprofile|dprofile
               Sort optimizations by increasing size (default), decreasing
               static profile count, or descreasing dynamic profile count
  -raw         Dump all keys and values and exit, ignoring all other options
  -reduce      Attempt to reduce the size of each optimization
  -triage      Attempt to avoid reporting optimizations that LLVM can do
  -verbose
  -verify      Verify each optimization
END
    exit -1;
}

my $RAW = 0;
my $NOOPTS = 0;
my $SORT = "size";
my $REDUCE = 0;
my $MERGE = 0;
my $PARSE = 0;
my $TRIAGE = 0;
my $VERBOSE = 0;
my $VERIFY = 0;
GetOptions(
    "merge" => \$MERGE,
    "noopts" => \$NOOPTS,
    "parse" => \$PARSE,
    "sort=s" => \$SORT,
    "raw"  => \$RAW,
    "reduce" => \$REDUCE,
    "triage" => \$TRIAGE,
    "verbose" => \$VERBOSE,
    "verify" => \$VERIFY,
    ) or usage();
usage() unless ($SORT eq "size" || $SORT eq "sprofile" || $SORT eq "dprofile");

my $noopt_count=0;
my %values;
my %sprofiles;
my %dprofiles;
my %sprofile_locs;
my %dprofile_locs;
my %toprint;

my $r = Redis->new();
$r->ping || die "no server?";
my @all_keys = $r->keys('*');

if ($RAW) {
    foreach my $opt (sort @all_keys) {
        my %h = $r->hgetall($opt);
        print "<$opt>\n";
        foreach my $kk (sort keys %h) {
            print "  <$kk> <$h{$kk}>\n";
        }
        my $result = $h{"result"};
        print "------------------------------------------------------\n\n";
    }
    exit 0;
}

print "; Inspecting ".scalar(@all_keys)." Redis values\n";

sub parse ($$) {
    (my $opt, my $RHS) = @_;
    (my $fh, my $tmpfn) = File::Temp::tempfile();
    print $fh $opt;
    $fh->flush();
    my $arg;
    if ($VERIFY) {
        $arg = "--infer-rhs";
    } else {
        $arg = "--parse-lhs-only";
    }
    open INF, "${check} $arg < $tmpfn 2>/dev/null |";
    my $output = "";
    my $success = 0;
    while (my $line = <INF>) {
        $success = 1 if ($line =~ /success/);
        next if ($line =~ /^;/);
        $output .= $line;
    }
    close INF;
    close $fh;
    unlink $tmpfn;
    if ($VERIFY) {
        die "expected '$RHS' but souper-check returned '$output'" unless
            ($output eq $RHS);
    } else {
        die "'$opt' does not parse as Souper" unless $success;
    }
}

sub add_sprofile($$) {
    (my $opt, my $href) = @_;
    my %h = %{$href};
    foreach my $k (keys %h) {
        $sprofile_locs{$opt}{$k} += $h{$k};
    }
    if (!$sprofile_locs{$opt}) {
        $sprofile_locs{$opt} = {};
    }
}

sub add_dprofile($$) {
    (my $opt, my $href) = @_;
    my %h = %{$href};
    foreach my $k (keys %h) {
        $dprofile_locs{$opt}{$k} += $h{$k};
    }
    if (!$dprofile_locs{$opt}) {
        $dprofile_locs{$opt} = {};
    }
}

my $xcnt = 0;
foreach my $opt (@all_keys) {
    # last if $xcnt++ > 2500;
    my %h = $r->hgetall($opt);
    my $result = $h{"result"};
    if (defined($result)) {
        parse($opt, $result) if $PARSE;
    } else {
        next;
    }
    my $sprofile = 0;
    my $dprofile = 0;
    my %sprofile_loc;
    my %dprofile_loc;
    foreach my $kk (keys %h) {
        if ($kk =~ /^sprofile (.*)$/) {
            my $count = $h{$kk};
            $sprofile += $count;
            $sprofile_loc{$1} += $count;
        }
        if ($kk =~ /^dprofile (.*)$/) {
            my $count = $h{$kk};
            $dprofile += $count;
            $dprofile_loc{$1} += $count;
        }
    }
    $opt .= $result;
    if ($result eq "") {
        $noopt_count++;
        $toprint{$opt} = 1 if $NOOPTS;
    } else {
        $toprint{$opt} = 1 if !$NOOPTS;
    }
    add_sprofile($opt, \%sprofile_loc);
    add_dprofile($opt, \%dprofile_loc);
    $sprofiles{$opt} = $sprofile;
    $dprofiles{$opt} = $dprofile;
}

print "; Discarding ${noopt_count} not-optimizations leaving ".
    scalar(keys %toprint)." optimizations\n";

sub replace($$) {
    (my $old, my $new) = @_;
    die if $new eq "";
    $sprofiles{$new} += $sprofiles{$old};
    $dprofiles{$new} += $dprofiles{$old};
    my %ss = %{$sprofile_locs{$old}};
    add_sprofile($new, \%ss);
    my %dd = %{$dprofile_locs{$old}};
    add_dprofile($new, \%dd);
    $toprint{$new} = 1;
    delete $toprint{$old};
}

sub remove($) {
    (my $opt) = @_;
    delete $toprint{$opt};
    delete $sprofiles{$opt};
    delete $dprofiles{$opt};
    delete $sprofile_locs{$opt};
    delete $dprofile_locs{$opt};
}

my $status_cnt;
my $status_opct;
my $status_total;

sub reset_status($) {
    (my $t) = @_;
    $status_total = $t;
    $status_opct = 0;
    $status_cnt = 0;
}

sub status() {
    print ".";
    $status_cnt++;
    my $pct = int(100.0*$status_cnt/$status_total);
    if ($pct > $status_opct) {
        $status_opct = $pct;
        print "$pct %\n";
    }
}

sub total_profile_count() {
    my $cnt = 0;
    foreach my $opt (keys %toprint) {
        $cnt += $sprofiles{$opt} + $dprofiles{$opt};
    }
    return $cnt;
}

if ($REDUCE) {
    print "; Reducing\n";
    my $tprofile = total_profile_count();

    my @keys = keys %toprint;
    reset_status(scalar(@keys)) if $VERBOSE;
    foreach my $opt (@keys) {
        (my $fh1, my $fn1) = File::Temp::tempfile();
        (my $fh2, my $fn2) = File::Temp::tempfile();
        print $fh1 $opt;
        close $fh1;
        close $fh2;
        if (runit ("$reducer < $fn1 > $fn2") != 0) {
            print "cannot reduce '$opt'\n";
            remove($opt);
            next;
        }
        open INF, "<$fn2" or die;
        my $new = "";
        while (my $line = <INF>) {
            $new .= $line;
        }
        close INF;
        unlink $fn1;
        unlink $fn2;
        if ($new eq "") {
            print "cannot reduce '$opt'\n";
            next;
        }
        replace($opt, $new);
        status() if $VERBOSE;
    }

    print "; After reducing there are ".scalar(keys %toprint)." optimizations\n";
    # die unless ($tprofile == total_profile_count());
}

if ($TRIAGE) {
    print "; Triaging\n";

    my @keys = keys %toprint;
    reset_status(scalar(@keys)) if $VERBOSE;
    foreach my $opt (@keys) {
        (my $fh1, my $fn1) = File::Temp::tempfile();
        print $fh1 $opt;
        close $fh1;
        open INF, "$triager < $fn1 | $llvmas | $llvmopt -O3 | $llvmdis |" or die;
        my $good = 0;
        my $bogus = 1;
        my $llvm = "";
        while (my $line = <INF>) {
            $bogus = 0 if ($line =~ /dummy2/);
            $good = 1 if ($line =~ /dummy2w = atomicrmw/);
            $llvm .= $line;
        }
        close INF;
        print "oops: '$opt' turned into bogus LLVM: '$llvm'\n\n" if $bogus;
        remove($opt) unless $good && !$bogus;
        status() if $VERBOSE;
    }

    print "; After triaging there are ".scalar(keys %toprint)." optimizations\n";
}

if ($MERGE) {
    print "; Merging\n";
    my $tprofile = total_profile_count();

    my @keys = keys %toprint;
    foreach my $opt (@keys) {
        my $new = $opt;
        $new =~ s/:i[0-9]+//g;
        $new =~ s/ [0-9]+/ C/g;
        replace($opt, $new);
    }
    print "; After merging there are ".scalar(keys %toprint)." optimizations\n";
    # die unless ($tprofile == total_profile_count());
}

sub bylen { length $a <=> length $b }
sub bysprofile { $sprofiles{$b} <=> $sprofiles{$a} }
sub bydprofile { $dprofiles{$b} <=> $dprofiles{$a} }

my $byx = \&bylen;
$byx = \&bysprofile if ($SORT eq "sprofile");
$byx = \&bydprofile if ($SORT eq "dprofile");

print "\n\n";

foreach my $opt (sort $byx keys %toprint) {
    print "$opt";
    print "\n";
    print "; total static profile = $sprofiles{$opt}\n";
    my %h = %{$sprofile_locs{$opt}};
    foreach my $k (sort { $h{$b} <=> $h{$a} } keys %h) {
        next if ($k eq "");
        print "; sprofile $h{$k} \"$k\"\n";
    }
    print "; total dynamic profile = $dprofiles{$opt}\n";
    %h = %{$dprofile_locs{$opt}};
    foreach my $k (sort { $h{$b} <=> $h{$a} } keys %h) {
        next if ($k eq "");
        print "; dprofile $h{$k} \"$k\"\n";
    }
    print "------------------------------------------------------\n\n";
}

my $cnt = 0;
foreach my $opt (keys %toprint) {
    $cnt += $sprofiles{$opt};
}
print "; overall total static profile weight = $cnt\n";
